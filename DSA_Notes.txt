
**********************************************************        DSA - KUNAL KUSHWAHA - YT 	    *******************************************************

DAY 1 : 00-07-22
------
Linear Search :
---------------
	Best Case   : O(1)
	Worst Case  : O(n)
	Find No.Of Digits : String.Length,Math.Log10()+1

Problems @ Leet
---------------
	1295 E,1672 E
----------------------------------------------------------------------------------------------------------------------------------------------------------
DAY 2 : 27-07-22
------
Binary Search :
---------------
	Best Case   : O(1)
	Worst Case  : O(log n)
	Find middle element, ( target > middle*changes based on accending and desending ) ? search right : search right , if middle == traget....ans
		Middle element : start+end / 2
		If RHS side : new start=mid+1
		If LHS side : new end=mid-1 

	Best way to find middle element : ( start + (end - start) ) / 2 
		cuz in traditional way (start + end) / 2 the sum may exceed the data type range and cause error**

	The rules are Visevera for desending order.
	
	Compare arr[start]<arr[end] for order and keep a boolean flag.
	
	using BS in un-sorted list gives un expected results
	
	List has an inbuilt BS method

Problems @ Leet
---------------

	if the give array is sorted then apply BS blindly
	704 E, **35 E, 268, 744, 34, 852 ,162, 1095(HARD)


***Pivot of an array( aka Peak)
---------------------------
	[3,4,5,6,7,0,1,2] - Either a mountain array or it might be rotated array

	How to find Peak or Pivot?
	---------------------------
		Start = 0 	End = 7		Mid =3

		(arr[Mid] > arr[Mid+1]) or (arr[Mid] < arr[Mid-1]) => this is the point where asc flow turns to desc flow

------------------------------------------------------------------------------------------------------------------------------------------------------------
DAY 3 : 08-08-22
------
Bubble Sort aka Sinking sort or Exchange sort:
-----------------------------------------------
	Best Case   : O(n)
	Worst Case  : O(n2)
	Compare next element and swap if it is smaller(i < i+1)
	when same values present and it's order is maintained its -> Stable Sorted Algorithm

Problems @ Leet
----------------


------------------------------------------------------------------------------------------------------------------------------------------------------------

Selection sort:
-----------------------------------------------
	Best Case   : O(n2)
	Worst Case  : O(n2)
	Find the Largest element of array and swap it to correct(LAST INDEX) index
	after every pass -> last= last - i th pass

Problems @ Leet
----------------


------------------------------------------------------------------------------------------------------------------------------------------------------------
Insertion sort:
-----------------------------------------------
	Best Case   : O(n)
	Worst Case  : O(n2)
	sort i+1 index for every i pass
	more faster than bubble sort since some steps are reduced
	more suitable when array is partially sorted****


Problems @ Leet
----------------

------------------------------------------------------------------------------------------------------------------------------------------------------------
Cyclic sort:
----------------------
	Best Case   : O(n)
	Worst Case  : O(n)
	It is only applicable when the give array is in range of 1 to N [1,2,3,4,5,6,7,8,9,10...] sequential
	just run one loop and compare the index position with the value : eg = if the value is 4 its index must be 3 if not swap it	


Problems @ Leet
----------------
	When ever you see '1 to n' in question just go for cyclic sort
	268E, 448E ,287M ,442M, 645E

------------------------------------------------------------------------------------------------------------------------------------------------------------

18/08/22

String and String Builder
--------------------------

Strings are immuatable

------------------------------------------------------------------------------------------------------------------------------------------------------------

22/08/22

Recursion - Part 1
--------------------
	1. Can solve complex problems in simple way.

	2. It takes more space complexity because of reccursive calls in stack.
Approach
--------
	1. Idnetify if you can break down the problem into smaller portion	
	2. write recursive relation if needed
	3. Draw the recursive tree
	4. Identify the flow of tree(left and right)
	5. use pen and paper to get a better understanding
	6. find the base condition.
	7. Determine return type and make sure you return for recurrsive call.
	8. parameters to be passed(benifitial for future calls)
	9. variables inside the method body(not benifitial for future calls).

Recurrence Relations Types
--------------------------
	1. Linear Releation 	-  Fibinoci Number (in this way the reccursive call method's parameter are subtracted or added. !!! some parts of recurrsive tree will be repeated)

	2. Divide and Conquer 	-  Binary Search (in this way the reccursive call method's parameter is divided, so it is much faster than linear relation)
------------------------------------------------------------------------------------------------------------------------------------------------------------

22/08/22

Time and Space Complexity
--------------------------

	Time Complexity
	----------------
		1. Time Complexity != Time Taken 
		2. Tells us how time is going to grow as the input grows.
		3. Look for worst case complexity
		4. do not care about constants in complexity
		5. always ignore less domination terms -> ( N3 + log(N) ) here log(N) is less dominating so you can eliminate that.
		6. O(1) < O(log(N)) < O(N) < O(N pow 2) < O(2 pow N) .... (refer growth hierarchy)
		
	Types of Notation 
	-----------------
		1. Big 	  O      Notation - Worst Case   (Upper bound)
		2. Little O      Notation - Worst Case   (slower than Big O)
		3. Big    Omega  Notation - Best Case    (Lower bound)
		4. Little Omega  Notation - Best Case    (slower than Big Omega)
		5. Big    Theta  Notation - Average Case

	Space Complexity
	----------------
		1. Space Complexity = Input space + Auxillary space 
		2. Auxillary space is a extra space taken by you algorithm (creating a temp array for example)
------------------------------------------------------------------------------------------------------------------------------------------------------------
29/08/22

Maths For DSA
--------------


	BitWise Operator
	-----------------
	1. AND operator 	-> only if all inputs are 1(True) then the output is 1(True) -> if you use AND with any input and 1 the output is 1.
	2. OR  operator 	-> if any input is 1(True) the output is 1(True).
	3. XOR operator 	-> only one of the input is true then output is true
						if Input XOR 1 		= Complement of Input
						if Input XOR 0 		= Input
						if Input XOR Input	= 0
		
	4. Complement Operator 	-> gives the opposite of input

		Number System
		--------------
	
		Base 10 -> Decimal system ie: Normal number system we use
		Base 02 -> Binary ie: 0's & 1's
		Base 16 -> Hexa Decimal

		Convertion
		-----------
		1. Decimal to Any Base	-> keep dividing input by base,take the remainder and write in opposite
		----------------------
			16 to binary -> 
				16/2 -> rem 0
				08/2 -> rem 0
				04/2 -> rem 0
				02/2 -> rem 0
				01/2 ->	rem 1

			Output 	     -> 10000

		2. Base to Any Decimal 	-> Multiply each digit with base pow digit and sum it up
		-----------------------
				(10000)2 to decimal
				= 0*2pow0 + 0*2pow1 + 0*2pow2 + 0*2pow3 + 1*2pow4
				= 0 + 0 + 0 + 0 + 16
				= 16.

	5. LEFT SHIFT Operator -> Shifts one binary to left of given input(adds) -> if A << B => answer would be { A + (2 pow B) }
	----------------------
	
	6. RIGHT SHIFT Operator -> Shifts one binary to right of given input(removes) -> if A >> B => answer would be { A / (2 pow B) }
	----------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------

	Problem Tricks
	---------------
	
	Q1 : Odd or Even without modulo operator(ie: using Bitwise)
	------------------------------------------------------------
		step 1 : convert given base to binary
		step 2 : if last digit is 1 => number is odd else its even
	Ex:
	---
		19 -> 1 0 0 1 1
		1  -> 0 0 0 0 1
		last digit is 1 so its odd number : input AND 1 => 1

		14 -> 0 1 1 1 0
		1  -> 0 0 0 0 1
		last digit is 0 so its even number : input AND 1 => 0
	
	**#**	This last digit is aka Least Significant Bit(LSB)	
	
	Q2 : find unique number from an array
	-------------------------------------
		array = [2,5,6,4,4,2,5]

	Q3: Set Bit  (Right Most)
	--------------------------
		Set bit is a bit postion where 1 occurs first it can either be from right or left
		
		example:
		--------
			Right Set Bit for 1 0 1 1 0 1 0 0
						    ^
         Negative Numbers in Binary
	----------------------------

		1 byte = 8 bit
		so for example 10 in 1 byte is represented as -> 0 0 0 0 1 0 1 0
								 M	     S L
		M -> Most  Significant Bit
		L -> Least Significant Bit
		S -> Set   Significant Bit

		****Here MSB decides the number is positve or negative


	How to convert -ve to +ve and vice versa
	-----------------------------------------
		10 = 0 0 0 0 1 0 1 0 
	
	Step 1 : Take a Complement of input 
	--------
		0 0 0 0 1 0 1 0 -> 1 1 1 1 0 1 0 1
	
	Step 2 : Add 1 to the Complement 
	--------
		 1 1 1 1 0 1 0 1
	      +  0 0 0 0 0 0 0 1
		-----------------
  		 1 1 1 1 0 1 1 0
		-----------------
	Q4 : Is Power of 2
	-------------------
		If the input's binary representation contains only one bit of 1 the it is a power of two
	
		2 -> 0 0 0 0 1 0
		4 -> 0 0 0 1 0 0 
		5 -> 0 0 0 1 0 1 -> here it has tow bits of 1 so its not a power of two

	Step 1 : 
	--------
		AND input with 1 -> we will get LSB either 1 or 0
	Step 2 : 
	--------
		Take a counter and count number of 1's
	Step 3 : 
	--------
		Right shift the number by one to remove LSB
	Step 4 : 
	--------
		Repeat this while the number is not equal to 0, and after the loop if 1's count is more than 1 then its not a power of two
			
				OR
			      ------

	******** Just use Shortcut Algorithm => n & (n-1) == 0 -> it power of two
	
	
------------------------------------------------------------------------------------------------------------------------------------------------------------



